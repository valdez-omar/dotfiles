% tmux

# attach to a session with the name my_session
echo "tmux a -t my_session"

# start a new session with the name my_session
echo "tmux new -s my_session"

# rename sessions
echo "ctrl + b $"

# rename windows
echo "ctrl + b ,"

# start new session
echo ": new -s mysession"

# show all sessions
echo "ctrl + b s"

# kill or delete current session
echo ": kill-session"

# session and window preview
echo "ctrl + b w"

# create window
echo "ctrl + b c"

# close current window
echo "ctrl + b &"

# move current window to the left by one position
echo ": swap-window -t -1"

# split current pane vertical
echo "ctrl + b %"

# split current pane horizontal
echo 'ctrl + b"'

# move current pane left
echo "ctrl + b {"

# move current pane right
echo "ctrl + b }"

# close current pane
echo "ctrl + b x"

# toggle pane zoom
echo "ctrl + b z"

# enter copy mode
echo "ctrl + b ["

$ % vim

# buffer new
echo ": enew"

# macro recording
echo "q a ... q"
echo "@a 12@a"

# norm
echo ": norm A!"
echo ": norm Icall('"

# shell !
echo "!ls"
echo "!cat /tmp/file.txt"
echo "!sort"
echo "!sort | uniq"

# Open files / URLs with gf / gx
echo "gf for opening files"
echo "gx for opening urls"

# % for jumping to the matching
echo "% ( or { or ["

# i / a (inside / outside)
echo "{('hello')}"
ehco "want to select only 'hello', vi'"
echo "want to select 'hello' with ', va'"
echo "want to select a word, viw or vaw"
echo "ci( is 'change inside brackets'"
echo "di( is 'delete inside brackets'"

# match only whole words
echo ":%s/\<foo\>/bar/g"

# replace in visual mode easily
echo ":s/foo/bar/g"

# quick and simple serach and replace
echo "%s/old/new/g"

# meaning of <,'>s/\..\+//g
echo ""

# find next
echo "f( will be find next '('"

# control increment numbers
echo "gC-a"

# change visual mode direction
echo "type o"

% git log personal

# git log graph all
git log --graph --all

# fancy git log graph all
git log --graph --topo-order --pretty='%w(100,0,6)%C(yellow)%h%C(bold)%C(black)%d %C(cyan)%ar %C(green)%an%n%C(bold)%C(white)%s %N' --abbrev-commit

# git log oneline
git log --oneline

% password store

# create default secure password
echo "pass generate folder/subfolder/entity"

# search for password files cotaining search-string when decrypted
echo "pass grep [GREPOPTIONS] search-string"

# pass git log fancy
pass git log --graph --topo-order --pretty='%w(100,0,6)%C(yellow)%h%C(bold)%C(black)%d %C(cyan)%ar %C(green)%an%n%C(bold)%C(white)%s %N' --abbrev-commit

% calibre epub

# Converting pdf to epub (install calibre first)
echo "ebook-convert input.pdf output.epub"

% Video recording (specific area mp4)

# Select area
wf-recorder -g "$(slurp)" -f ~/Videos/screen_recording.mp4

% GIF recording (ffmpeg gif)

# GIF recording, step one:
ffmpeg -i ~/Videos/screen_recording.mp4 -vf "fps=10,scale=600:-1:flags=lanczos,palettegen" -y ~/Pictures/palette.png

# GIF recording, step two:
ffmpeg -i ~/Videos/screen_recording.mp4 -i ~/Pictures/palette.png -lavfi "fps=10,scale=600:-1:flags=lanczos[p];[p][1:v]paletteuse=dither=bayer:bayer_scale=5" -y ~/Pictures/screen_recording.gif

% Search and replace vim

# with @
echo ":%s@findWord@replaceWord"

% Record macro in neovim
echo "Press `q` followed by a letter (from a to z), press q again to stop recording"

% Find local IP address

# Remember to see if you have vpn activated or not
ip a\
  | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' \
  | grep -Eo '([0-9]*\.){3}[0-9]*' \
  | grep -v '127.0.0.1' \
  | tail -n1

% Stow adopt

# When you point to config files and to be in dotfiles folder
stow --adopt .

% Kernel messages

# Check last 20 messages (like if connected usb)
dmesg | tail -n 20

% ivpn

# Connect to specifc server
echo "ivpn connect -l 'mx.wg.ivpn.net'"

# Splittun
echo "ivpn splittun -appadd iridium-browser --disable-gpu"

% journalctl

# see logs only error messages and higher priority logs
journalctl -p err

% unix

# testing which files to output
find . -type f -not \( -path "*/.git/*" -o -path "*/node_modules/*" -o -path "*/vendor/*" -o -path "*/dist/*" -o -path "*/build/*" -o -path "*/target/*" -o -name "context.txt" -o -name ".env" -o -name "*.env" -o -name "secrets.*" -o -name "credentials.*" -o -name "config.*" -o -name "*.key" -o -name "*.pem" -o -path "*/config/*" -o -path "*/secrets/*" \)

# add to txt file all
find . -type f -not \( -path "*/.git/*" -o -path "*/node_modules/*" -o -path "*/vendor/*" -o -path "*/dist/*" -o -path "*/build/*" -o -path "*/target/*" -o -name "context.txt" -o -name ".env" -o -name "*.env" -o -name "secrets.*" -o -name "credentials.*" -o -name "config.*" -o -name "*.key" -o -name "*.pem" -o -path "*/config/*" -o -path "*/secrets/*" \) -exec sh -c 'echo "\n=== {} ===\n"; cat {}' \; > context.txt

# add to txt file all files but exclude binaries
find . -type f -not \( -path "*/.git/*" -o -path "*/node_modules/*" -o -path "*/vendor/*" -o -path "*/dist/*" -o -path "*/build/*" -o -path "*/target/*" -o -name "context.txt" -o -name ".env" -o -name "*.env" -o -name "secrets.*" -o -name "credentials.*" -o -name "config.*" -o -name "*.key" -o -name "*.pem" -o -path "*/config/*" -o -path "*/secrets/*" \) -exec sh -c 'if file -b --mime-type "{}" | grep -q text; then echo "\n=== {} ===\n"; cat "{}"; fi' \; > context.txt

# add to txt file all in current dir maxdepth 1
find . -maxdepth 1 -type f -not \( -path "./.git/*" -o -path "./node_modules/*" -o -path "./vendor/*" -o -path "./dist/*" -o -path "./build/*" -o -path "./target/*" -o -name "context.txt" -o -name ".env" -o -name "*.env" -o -name "secrets.*" -o -name "credentials.*" -o -name "config.*" -o -name "*.key" -o -name "*.pem" -o -path "./config/*" -o -path "./secrets/*" \) -exec sh -c 'echo "\n=== {} ===\n"; cat {}' \; > context.txt

# add to txt file all withing git repo
git ls-files | xargs -I {} sh -c 'echo "\n=== {} ===\n"; cat {}' > context.txt

# encrypt example
openssl enc -aes-256-cbc -md sha512 -pbkdf2 -iter 250000 -salt -in images.tar.gz -out images.tar.gz.enc

# decrypt example
openssl enc -aes-256-cbc -d -md sha512 -pbkdf2 -iter 250000 -salt -in images.tar.gz.enc -out images.tar.gz
